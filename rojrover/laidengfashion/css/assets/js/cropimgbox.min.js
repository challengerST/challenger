(function (a) { if (typeof define === "function" && define.amd) { define(["jquery"], a) } else { if (typeof exports !== "undefined") { module.exports = a(require("jquery")) } else { a(jQuery) } } }(function (a) { var b = function (f, g) { f.expandRatio = f.expandRatio || 1.1; f.narrowRatio = f.narrowRatio || 0.9; var g = g || a(f.imageBox), i = { state: {}, ratio: 1, clipType: "1|1|1", options: f, imageBox: g, thumbBox: g.find(f.thumbBox), spinner: g.find(f.spinner), image: new Image(), getDataURL: function (w) { var B = this.thumbBox.width(), y = this.thumbBox.height(), p = document.createElement("canvas"), C = g.css("background-position").split(" "), x = g.css("background-size").split(" "), u = parseInt(C[0]) - g.width() / 2 + B / 2, t = parseInt(C[1]) - g.height() / 2 + y / 2, v = parseInt(x[0]), E = parseInt(x[1]), G = parseInt(this.image.height), A = parseInt(this.image.width); p.width = B; p.height = y; var r = [], k = i.clipType.split("|"); var n = p.getContext("2d"); n.drawImage(this.image, 0, 0, A, G, u, t, v, E); var D = p.toDataURL("image/png"); r.push(D); var F = 0, I = ""; if (k.length > 1 && k[1] == "1") { n.clearRect(0, 0, 10000, 10000); I = "gray"; var m = H(p, D, I, function () { F += 1; D = p.toDataURL("image/png"); r.push(D) }) } if (k.length > 2 && k[2] == "1") { n.clearRect(0, 0, 10000, 10000); I = "bright"; var m = H(p, D, I, function () { F += 1; D = p.toDataURL("image/png"); r.push(D) }) } function H(N, J, S, T) { var Q = this; var L = N, O = L.getContext("2d"), J = J; var R = function (V) { var W = V.width, U = V.height; M(W, U); O.drawImage(V, 0, 0); var Y = O.getImageData(0, 0, W, U), X = new o(U, W, Y.data); Y = null; O.clearRect(0, 0, W, U); return X }, M = function (U, V) { L.width = U; L.height = V }, P = function (V) { var W = V.col, U = V.row, X = O.createImageData(W, U); X.data.set(V.data); return X }, K = function (V, W) { var U = new Image(); U.onload = function () { var X = R(U); if (V == "gray") { var Y = l(X, "CV_RGBA"); var Z = P(Y); O.putImageData(Z, 0, 0) } if (V == "bright") { var Y = z(X, 50, 50); var Z = P(Y); O.putImageData(Z, 0, 0) } W() }; U.src = J }; K(S, T) } function o(M, J, L, K) { this.row = M || 0; this.col = J || 0; this.channel = 4; this.buffer = K || new ArrayBuffer(M * J * 4); this.data = new Uint8ClampedArray(this.buffer); L && this.data.set(L); this.bytes = 1; this.type = "CV_RGBA" } function l(K, R) { var S = K.row, J = K.col; if (K.type && R === "CV_RGBA") { var P = new o(S, J), M = P.data, L = K.data; var Q, O, N = K.row * K.col * 4; while (N) { M[N -= 4] = M[Q = N + 1] = M[O = N + 2] = (L[N] * 299 + L[Q] * 587 + L[O] * 114) / 1000; M[N + 3] = L[N + 3] } } else { if (K.type && R === "CV_RGBA2GRAY") { var P = new o(S, J), M = P.data, L = K.data; var N = S * J; while (N) { M[--N] = (L[4 * N] * 9798 + L[4 * N + 1] * 19235 + L[4 * N + 2] * 3736) >> 15 } } } return P } var z = function (J, V, M) { if (J.type === "CV_RGBA") { var K = J.data, U = J.col, S = J.row, ad = new o(S, U); var ab = ad.data, ac = Math.max(-255, Math.min(255, V || 0)), L = Math.max(-255, Math.min(255, M || 0)); var Y = l(J, "CV_RGBA2GRAY", 2), T = 0, W = Y.data; var O, P, Z; for (O = S; O--;) { for (P = U; P--;) { T += W[O * U + P] } } var Q, X, aa, N, R = (T / (S * U)) | 0; for (O = S; O--;) { for (P = U; P--;) { N = (O * U + P) * 4; ab[N] = K[N] + ac; ab[N + 1] = K[N + 1] + ac; ab[N + 2] = K[N + 2] + ac; if (L >= 0) { for (Z = 3; Z--;) { if (ab[N + Z] >= R) { ab[N + Z] = ab[N + Z] + (255 - R) * L / 255 } else { ab[N + Z] = ab[N + Z] - (R * L / 255) } } } else { ab[N] = ab[N] + (ab[N] - R) * L / 255; ab[N + 1] = ab[N + 1] + (ab[N + 1] - R) * L / 255; ab[N + 2] = ab[N + 2] + (ab[N + 2] - R) * L / 255 } ab[N + 3] = 255 } } } return ad }; var s = k.length > 1 && k[1] == "1" || k.length > 2 && k[2] == "1" ? (k.length > 1 && k[1] == "1" && k.length > 2 && k[2] == "1" ? 2 : 1) : 0; if (k.length > 1 && k[1] == "1" || k.length > 2 && k[2] == "1") { if (F > 0) { return r } else { (function q() { if (F >= s) { F = 0; w(r) } else { setTimeout(q, 500) } })() } } }, getBlob: function (l) { var o = this.getDataURL()[l]; var k = o.replace("data:image/png;base64,", ""); var n = atob(k); var m = []; for (var l = 0; l < n.length; l++) { m.push(n.charCodeAt(l)) } return new Blob([new Uint8Array(m)], { type: "image/png" }) }, zoomIn: function () { this.ratio *= f.expandRatio; d() }, zoomOut: function () { this.ratio *= f.narrowRatio; d() } }, d = function () { var k = parseInt(i.image.width) * i.ratio; var m = parseInt(i.image.height) * i.ratio; var l = (g.width() - k) / 2; var n = (g.height() - m) / 2; g.css({ "background-image": "url(" + i.image.src + ")", "background-size": k + "px " + m + "px", "background-position": l + "px " + n + "px", "background-repeat": "no-repeat" }) }, j = function (k) { k.stopImmediatePropagation(); i.state.dragable = true; i.state.mouseX = k.clientX; i.state.mouseY = k.clientY }, c = function (n) { n.stopImmediatePropagation(); if (i.state.dragable) { var l = n.clientX - i.state.mouseX; var p = n.clientY - i.state.mouseY; var m = g.css("background-position").split(" "); var k = l + parseInt(m[0]); var o = p + parseInt(m[1]); g.css("background-position", k + "px " + o + "px"); i.state.mouseX = n.clientX; i.state.mouseY = n.clientY } }, e = function (k) { k.stopImmediatePropagation(); i.state.dragable = false }, h = function (k) { k.originalEvent.wheelDelta > 0 || k.originalEvent.detail < 0 ? i.ratio *= f.expandRatio : i.ratio *= f.narrowRatio; d() }; i.spinner.show(); i.image.onload = function () { i.spinner.hide(); d(); g.bind("mousedown", j); g.bind("mousemove", c); a(window).bind("mouseup", e); g.bind("mousewheel DOMMouseScroll", h) }; i.image.src = f.imgSrc; g.on("remove", function () { a(window).unbind("mouseup", e) }); return i }; jQuery.fn.cropimgbox = function (c) { return new b(c, this) } }));